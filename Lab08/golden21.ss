;golden21
(define a -4)(define b -2.5)
(define (fun x)
 (set! x (- x (/ 20 21)))
 (-(+(- x)(* 5 (expt(log (expt(atan(+ x 3)) 2)) 4))) 8)
)
(define (golden-section-search a b)
 (let(
      (xmin(cond((> b a)(golden-start a b))(else (golden-start b a ))))
     )
     (newline)
     xmin
 )
)
(define (golden-start a b)
 (set! total-iterations 0)
 (let(
      (xa (+ a (* mphi(- b a))))
      (xb (+ b (-(* mphi(- b a)))))
     )
     (try a b xa (fun xa) xb (fun xb))
 )
)
(define mphi (* (- 3(sqrt 5))(/ 2.0)))
(define (try a b xa ya xb yb)
 (cond((close-enough? a b)(* (+ a b)0.5))
      (else (display "+")
            (set! total-iterations (+ total-iterations 1))
            (cond((> yb ya)(set! b xb)
                           (set! xb xa)
                           (set! yb ya)
                           (set! xa (+ a (* mphi(- b a))))
                           (try a b xa (fun xa) xb yb)
                 )
                 (else (set! a xa)
                       (set! xa xb)
                       (set! ya yb)
                       (set! xb (- b (* mphi(- b a))))
                       (try a b xa ya xb (fun xb))
                 )
            );cond...
      );else...
 );cond...
)
(define (close-enough? x y)
  (> tolerance (abs (- x y)))
)
(define tolerance 0.001)
(define total-iterations 0)
(define xmin 0)
(set! xmin(golden-section-search a b))
  (display"Interval=\t[")
  (display a)
  (display" , ")
  (display b)
  (display"]\n")
  (display"Total number of iteranions=")
total-iterations
  (display"xmin=\t\t")
xmin
  (display"f(xmin)=\t")
(fun xmin)
